

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Jul 11 18:09:42 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	swtext1,local,class=CONST,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 1.42
    25                           ; Generated 13/04/2017 GMT
    26                           ; 
    27                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F628A Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001F                     	;# 
    82  0081                     	;# 
    83  0085                     	;# 
    84  0086                     	;# 
    85  008C                     	;# 
    86  008E                     	;# 
    87  0092                     	;# 
    88  0098                     	;# 
    89  0099                     	;# 
    90  009A                     	;# 
    91  009B                     	;# 
    92  009C                     	;# 
    93  009D                     	;# 
    94  009F                     	;# 
    95                           
    96                           	psect	idataBANK0
    97  029A                     __pidataBANK0:	
    98                           
    99                           ;initializer for read_input@F614
   100  029A  3437               	retlw	55
   101  029B  3438               	retlw	56
   102  029C  3439               	retlw	57
   103  029D  342F               	retlw	47
   104  029E  3434               	retlw	52
   105  029F  3435               	retlw	53
   106  02A0  3436               	retlw	54
   107  02A1  342A               	retlw	42
   108  02A2  3431               	retlw	49
   109  02A3  3432               	retlw	50
   110  02A4  3433               	retlw	51
   111  02A5  342D               	retlw	45
   112  02A6  3430               	retlw	48
   113  02A7  3463               	retlw	99
   114  02A8  343D               	retlw	61
   115  02A9  342B               	retlw	43
   116                           
   117                           ;initializer for _lookup7segCa
   118  02AA  345F               	retlw	95
   119  02AB  3406               	retlw	6
   120  02AC  349B               	retlw	155
   121  02AD  348F               	retlw	143
   122  02AE  34C6               	retlw	198
   123  02AF  34CD               	retlw	205
   124  02B0  34DD               	retlw	221
   125  02B1  3407               	retlw	7
   126  02B2  34DF               	retlw	223
   127  02B3  34CF               	retlw	207
   128  02B4  3480               	retlw	128
   129  02B5  34D9               	retlw	217
   130  0010                     _T1CON	set	16
   131  001F                     _CMCON	set	31
   132  000B                     _INTCONbits	set	11
   133  0001                     _TMR0	set	1
   134  0006                     _PORTB	set	6
   135  0006                     _PORTBbits	set	6
   136  0005                     _PORTA	set	5
   137  0085                     _TRISA	set	133
   138  0086                     _TRISB	set	134
   139  0081                     _OPTION_REGbits	set	129
   140                           
   141                           ; #config settings
   142  0000                     
   143                           	psect	cinit
   144  0011                     start_initialization:	
   145  0011                     __initialization:	
   146                           
   147                           ; Initialize objects allocated to BANK0
   148  0011  1383               	bcf	3,7	;select IRP bank0
   149  0012  305E               	movlw	low (__pdataBANK0+28)
   150  0013  00FD               	movwf	btemp+-1
   151  0014  3002               	movlw	high __pidataBANK0
   152  0015  00FE               	movwf	btemp
   153  0016  309A               	movlw	low __pidataBANK0
   154  0017  00FF               	movwf	btemp+1
   155  0018  3042               	movlw	low __pdataBANK0
   156  0019  0084               	movwf	4
   157  001A  22D6               	fcall	init_ram0
   158                           
   159                           ; Clear objects allocated to COMMON
   160  001B  01F6               	clrf	__pbssCOMMON& (0+127)
   161  001C  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   162  001D  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   163  001E  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   164  001F                     end_of_initialization:	
   165                           ;End of C runtime variable initialization code
   166                           
   167  001F                     __end_of__initialization:	
   168  001F  0183               	clrf	3
   169  0020  2821               	ljmp	_main	;jump to C main() function
   170                           
   171                           	psect	bssCOMMON
   172  0076                     __pbssCOMMON:	
   173  0076                     _cnt:	
   174  0076                     	ds	2
   175  0078                     _PORTAcache:	
   176  0078                     	ds	2
   177                           
   178                           	psect	dataBANK0
   179  0042                     __pdataBANK0:	
   180  0042                     read_input@F614:	
   181  0042                     	ds	16
   182  0052                     _lookup7segCa:	
   183  0052                     	ds	12
   184                           
   185                           	psect	inittext
   186  02D2                     init_fetch0:	
   187                           ;	Called with low address in FSR and high address in W
   188                           
   189  02D2  087E               	movf	126,w
   190  02D3  008A               	movwf	10
   191  02D4  087F               	movf	127,w
   192  02D5  0082               	movwf	2
   193  02D6                     init_ram0:	
   194                           ;Called with:
   195                           ;	high address of idata address in btemp 
   196                           ;	low address of idata address in btemp+1 
   197                           ;	low address of data in FSR
   198                           ;	high address + 1 of data in btemp-1
   199                           
   200  02D6  22D2               	fcall	init_fetch0
   201  02D7  0080               	movwf	0
   202  02D8  0A84               	incf	4,f
   203  02D9  0804               	movf	4,w
   204  02DA  067D               	xorwf	125,w
   205  02DB  1903               	btfsc	3,2
   206  02DC  3400               	retlw	0
   207  02DD  0AFF               	incf	127,f
   208  02DE  1903               	btfsc	3,2
   209  02DF  0AFE               	incf	126,f
   210  02E0  2AD6               	goto	init_ram0
   211                           
   212                           	psect	cstackCOMMON
   213  0070                     __pcstackCOMMON:	
   214  0070                     ?_display:	
   215  0070                     ?_read_input:	
   216                           ; 1 bytes @ 0x0
   217                           
   218  0070                     ?_clock:	
   219                           ; 1 bytes @ 0x0
   220                           
   221  0070                     ??_clock:	
   222                           ; 1 bytes @ 0x0
   223                           
   224  0070                     ?_enable_interrupt:	
   225                           ; 1 bytes @ 0x0
   226                           
   227  0070                     ?_disable_interrupt:	
   228                           ; 1 bytes @ 0x0
   229                           
   230  0070                     ?_main:	
   231                           ; 1 bytes @ 0x0
   232                           
   233                           
   234                           ; 2 bytes @ 0x0
   235  0070                     	ds	6
   236                           
   237                           	psect	cstackBANK0
   238  0020                     __pcstackBANK0:	
   239  0020                     ??_display:	
   240  0020                     ??_enable_interrupt:	
   241                           ; 1 bytes @ 0x0
   242                           
   243  0020                     ??_disable_interrupt:	
   244                           ; 1 bytes @ 0x0
   245                           
   246  0020                     ?_getRow:	
   247                           ; 1 bytes @ 0x0
   248                           
   249  0020                     ?___wmul:	
   250                           ; 2 bytes @ 0x0
   251                           
   252  0020                     ?___lwdiv:	
   253                           ; 2 bytes @ 0x0
   254                           
   255  0020                     display@n:	
   256                           ; 2 bytes @ 0x0
   257                           
   258  0020                     ___wmul@multiplier:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0020                     ___lwdiv@divisor:	
   262                           ; 2 bytes @ 0x0
   263                           
   264                           
   265                           ; 2 bytes @ 0x0
   266  0020                     	ds	2
   267  0022                     ??_getRow:	
   268  0022                     getRow@row:	
   269                           ; 1 bytes @ 0x2
   270                           
   271  0022                     ___wmul@multiplicand:	
   272                           ; 2 bytes @ 0x2
   273                           
   274  0022                     ___lwdiv@dividend:	
   275                           ; 2 bytes @ 0x2
   276                           
   277                           
   278                           ; 2 bytes @ 0x2
   279  0022                     	ds	2
   280  0024                     ??_read_input:	
   281  0024                     ??___wmul:	
   282                           ; 1 bytes @ 0x4
   283                           
   284  0024                     ??___lwdiv:	
   285                           ; 1 bytes @ 0x4
   286                           
   287  0024                     ___wmul@product:	
   288                           ; 1 bytes @ 0x4
   289                           
   290                           
   291                           ; 2 bytes @ 0x4
   292  0024                     	ds	1
   293  0025                     ___lwdiv@counter:	
   294                           
   295                           ; 1 bytes @ 0x5
   296  0025                     	ds	1
   297  0026                     ___lwdiv@quotient:	
   298                           
   299                           ; 2 bytes @ 0x6
   300  0026                     	ds	2
   301  0028                     read_input@kb:	
   302                           
   303                           ; 16 bytes @ 0x8
   304  0028                     	ds	16
   305  0038                     ??_main:	
   306                           
   307                           ; 1 bytes @ 0x18
   308  0038                     	ds	2
   309  003A                     main@op:	
   310                           
   311                           ; 1 bytes @ 0x1A
   312  003A                     	ds	1
   313  003B                     main@error:	
   314                           
   315                           ; 2 bytes @ 0x1B
   316  003B                     	ds	2
   317  003D                     main@state:	
   318                           
   319                           ; 2 bytes @ 0x1D
   320  003D                     	ds	2
   321  003F                     main@result:	
   322                           
   323                           ; 2 bytes @ 0x1F
   324  003F                     	ds	2
   325  0041                     main@in:	
   326                           
   327                           ; 1 bytes @ 0x21
   328  0041                     	ds	1
   329                           
   330                           	psect	maintext
   331  0021                     __pmaintext:	
   332 ;;
   333 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   334 ;;
   335 ;; *************** function _main *****************
   336 ;; Defined at:
   337 ;;		line 114 in file "main.c"
   338 ;; Parameters:    Size  Location     Type
   339 ;;		None
   340 ;; Auto vars:     Size  Location     Type
   341 ;;  in              1   33[BANK0 ] unsigned char 
   342 ;;  result          2   31[BANK0 ] int 
   343 ;;  state           2   29[BANK0 ] unsigned int 
   344 ;;  error           2   27[BANK0 ] int 
   345 ;;  op              1   26[BANK0 ] unsigned char 
   346 ;; Return value:  Size  Location     Type
   347 ;;                  2   78[None  ] int 
   348 ;; Registers used:
   349 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   350 ;; Tracked objects:
   351 ;;		On entry : B00/0
   352 ;;		On exit  : 0/0
   353 ;;		Unchanged: 0/0
   354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   355 ;;      Params:         0       0       0       0
   356 ;;      Locals:         0       8       0       0
   357 ;;      Temps:          0       2       0       0
   358 ;;      Totals:         0      10       0       0
   359 ;;Total ram usage:       10 bytes
   360 ;; Hardware stack levels required when called:    3
   361 ;; This function calls:
   362 ;;		___lwdiv
   363 ;;		___wmul
   364 ;;		_disable_interrupt
   365 ;;		_display
   366 ;;		_enable_interrupt
   367 ;;		_read_input
   368 ;; This function is called by:
   369 ;;		Startup code after reset
   370 ;; This function uses a non-reentrant model
   371 ;;
   372                           
   373                           
   374                           ;psect for function _main
   375  0021                     _main:	
   376                           
   377                           ;main.c: 116: OPTION_REGbits.PS = 0x3;
   378                           
   379                           ;incstack = 0
   380                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   381  0021  1683               	bsf	3,5	;RP0=1, select bank1
   382  0022  1303               	bcf	3,6	;RP1=0, select bank1
   383  0023  0801               	movf	1,w	;volatile
   384  0024  39F8               	andlw	-8
   385  0025  3803               	iorlw	3
   386  0026  0081               	movwf	1	;volatile
   387                           
   388                           ;main.c: 117: OPTION_REGbits.T0CS = 0x0;
   389  0027  1281               	bcf	1,5	;volatile
   390                           
   391                           ;main.c: 118: OPTION_REGbits.PSA = 0x0;
   392  0028  1181               	bcf	1,3	;volatile
   393                           
   394                           ;main.c: 120: INTCONbits.GIE = 1;
   395  0029  178B               	bsf	11,7	;volatile
   396                           
   397                           ;main.c: 122: CMCON |= 7;
   398  002A  3007               	movlw	7
   399  002B  1283               	bcf	3,5	;RP0=0, select bank0
   400  002C  1303               	bcf	3,6	;RP1=0, select bank0
   401  002D  00B8               	movwf	??_main
   402  002E  0838               	movf	??_main,w
   403  002F  049F               	iorwf	31,f	;volatile
   404                           
   405                           ;main.c: 123: T1CON = 0b00000001;
   406  0030  3001               	movlw	1
   407  0031  0090               	movwf	16	;volatile
   408                           
   409                           ;main.c: 125: PORTB = 0;
   410  0032  0186               	clrf	6	;volatile
   411                           
   412                           ;main.c: 126: TRISB = 0b11110000;
   413  0033  30F0               	movlw	240
   414  0034  1683               	bsf	3,5	;RP0=1, select bank1
   415  0035  1303               	bcf	3,6	;RP1=0, select bank1
   416  0036  0086               	movwf	6	;volatile
   417                           
   418                           ;main.c: 127: PORTB = 0b00000001;
   419  0037  3001               	movlw	1
   420  0038  1283               	bcf	3,5	;RP0=0, select bank0
   421  0039  1303               	bcf	3,6	;RP1=0, select bank0
   422  003A  0086               	movwf	6	;volatile
   423                           
   424                           ;main.c: 129: TRISA = 0;
   425  003B  1683               	bsf	3,5	;RP0=1, select bank1
   426  003C  1303               	bcf	3,6	;RP1=0, select bank1
   427  003D  0185               	clrf	5	;volatile
   428                           
   429                           ;main.c: 130: PORTA = 0;
   430  003E  1283               	bcf	3,5	;RP0=0, select bank0
   431  003F  1303               	bcf	3,6	;RP1=0, select bank0
   432  0040  0185               	clrf	5	;volatile
   433                           
   434                           ;main.c: 134: unsigned state = 0;
   435  0041  01BD               	clrf	main@state
   436  0042  01BE               	clrf	main@state+1
   437                           
   438                           ;main.c: 135: char op = ' ';
   439  0043  3020               	movlw	32
   440  0044  00B8               	movwf	??_main
   441  0045  0838               	movf	??_main,w
   442  0046  00BA               	movwf	main@op
   443                           
   444                           ;main.c: 136: int error = 0;
   445  0047  01BB               	clrf	main@error
   446  0048  01BC               	clrf	main@error+1
   447                           
   448                           ;main.c: 137: int result = 0;
   449  0049  01BF               	clrf	main@result
   450  004A  01C0               	clrf	main@result+1
   451                           
   452                           ;main.c: 142: switch (state) {
   453  004B  2953               	goto	l1415
   454  004C                     l1417:	
   455                           ;main.c: 143: case 0:
   456                           
   457                           
   458                           ;main.c: 144: if (in >= '0' && in <= '9') {
   459  004C  3030               	movlw	48
   460  004D  0241               	subwf	main@in,w
   461  004E  1C03               	skipc
   462  004F  2953               	goto	l1415
   463  0050  303A               	movlw	58
   464  0051  0241               	subwf	main@in,w
   465  0052  1803               	skipnc
   466  0053  2953               	goto	l1415
   467                           
   468                           ;main.c: 145: display(in);
   469  0054  0841               	movf	main@in,w
   470  0055  2254               	fcall	_display
   471                           
   472                           ;main.c: 146: result = in - '0';
   473  0056  1283               	bcf	3,5	;RP0=0, select bank0
   474  0057  1303               	bcf	3,6	;RP1=0, select bank0
   475  0058  0841               	movf	main@in,w
   476  0059  3ED0               	addlw	208
   477  005A  00BF               	movwf	main@result
   478  005B  30FF               	movlw	255
   479  005C  1803               	skipnc
   480  005D  3000               	movlw	0
   481  005E  00C0               	movwf	main@result+1
   482                           
   483                           ;main.c: 147: state = 1;
   484  005F  3001               	movlw	1
   485  0060  2950               	goto	L2
   486  0061                     l1427:	
   487                           ;main.c: 150: case 1:
   488                           
   489                           ;main.c: 148: }
   490                           ;main.c: 149: break;
   491                           
   492                           
   493                           ;main.c: 151: if (in == 'c') {
   494  0061  3063               	movlw	99
   495  0062  0641               	xorwf	main@in,w
   496  0063  1903               	btfsc	3,2
   497  0064  292F               	goto	L6
   498                           
   499                           ;main.c: 154: } else if (in == '+' || in == '-' || in == '*' || in == '/') {
   500                           
   501                           ;main.c: 153: state = 0;
   502                           
   503                           ;main.c: 152: display(' ');
   504  0065  302B               	movlw	43
   505  0066  0641               	xorwf	main@in,w
   506  0067  1903               	btfsc	3,2
   507  0068  2947               	goto	L4
   508  0069  302D               	movlw	45
   509  006A  0641               	xorwf	main@in,w
   510  006B  1903               	btfsc	3,2
   511  006C  2947               	goto	L4
   512  006D  302A               	movlw	42
   513  006E  0641               	xorwf	main@in,w
   514  006F  1903               	btfsc	3,2
   515  0070  2947               	goto	L4
   516  0071  302F               	movlw	47
   517  0072  0641               	xorwf	main@in,w
   518  0073  1903               	btfsc	3,2
   519  0074  2947               	goto	L4
   520                           
   521                           ;main.c: 158: } else if (in == '=') {
   522                           
   523                           ;main.c: 157: state = 2;
   524                           
   525                           ;main.c: 156: op = in;
   526                           
   527                           ;main.c: 155: display('-');
   528  0075  303D               	movlw	61
   529  0076  0641               	xorwf	main@in,w
   530  0077  1D03               	btfss	3,2
   531  0078  2953               	goto	l1415
   532                           
   533                           ;main.c: 159: if (error) {
   534  0079  083B               	movf	main@error,w
   535  007A  043C               	iorwf	main@error+1,w
   536  007B  1903               	btfsc	3,2
   537  007C  287F               	goto	l1453
   538                           
   539                           ;main.c: 160: display('E');
   540  007D  3045               	movlw	69
   541  007E  2883               	goto	L5
   542  007F                     l1453:	
   543                           ;main.c: 161: }
   544                           
   545                           
   546                           ;main.c: 162: else {
   547                           ;main.c: 163: display(result + '0');
   548  007F  1283               	bcf	3,5	;RP0=0, select bank0
   549  0080  1303               	bcf	3,6	;RP1=0, select bank0
   550  0081  083F               	movf	main@result,w
   551  0082  3E30               	addlw	48
   552  0083                     L5:	
   553  0083  2254               	fcall	_display
   554                           
   555                           ;main.c: 164: }
   556                           ;main.c: 165: state = 3;
   557  0084  3003               	movlw	3
   558  0085  1283               	bcf	3,5	;RP0=0, select bank0
   559  0086  1303               	bcf	3,6	;RP1=0, select bank0
   560  0087  00BD               	movwf	main@state
   561  0088  3000               	movlw	0
   562  0089  00BE               	movwf	main@state+1
   563                           
   564                           ;main.c: 166: enable_interrupt();
   565  008A  22E1               	fcall	_enable_interrupt
   566                           
   567                           ;main.c: 167: }
   568                           ;main.c: 168: break;
   569  008B  2953               	goto	l1415
   570  008C                     l1459:	
   571                           ;main.c: 169: case 2:
   572                           
   573                           
   574                           ;main.c: 170: if (in >= '0' && in <= '9') {
   575  008C  3030               	movlw	48
   576  008D  1283               	bcf	3,5	;RP0=0, select bank0
   577  008E  1303               	bcf	3,6	;RP1=0, select bank0
   578  008F  0241               	subwf	main@in,w
   579  0090  1C03               	skipc
   580  0091  28FC               	goto	l1485
   581  0092  303A               	movlw	58
   582  0093  0241               	subwf	main@in,w
   583  0094  1803               	skipnc
   584  0095  28FC               	goto	l1485
   585                           
   586                           ;main.c: 171: display(in);
   587  0096  0841               	movf	main@in,w
   588  0097  2254               	fcall	_display
   589                           
   590                           ;main.c: 172: state = 1;
   591  0098  3001               	movlw	1
   592  0099  1283               	bcf	3,5	;RP0=0, select bank0
   593  009A  1303               	bcf	3,6	;RP1=0, select bank0
   594  009B  00BD               	movwf	main@state
   595  009C  3000               	movlw	0
   596  009D  00BE               	movwf	main@state+1
   597                           
   598                           ;main.c: 173: if(error) {
   599  009E  083B               	movf	main@error,w
   600  009F  043C               	iorwf	main@error+1,w
   601  00A0  1D03               	btfss	3,2
   602  00A1  2953               	goto	l1415
   603  00A2  28ED               	goto	l1483
   604  00A3                     l1471:	
   605                           ;main.c: 177: case '+':
   606                           
   607                           ;main.c: 175: }
   608                           ;main.c: 176: switch (op) {
   609                           
   610                           ;main.c: 174: break;
   611                           
   612                           
   613                           ;main.c: 178: result += (in - '0');
   614  00A3  0841               	movf	main@in,w
   615  00A4  3ED0               	addlw	208
   616  00A5  00B8               	movwf	??_main
   617  00A6  30FF               	movlw	255
   618  00A7  1803               	skipnc
   619  00A8  3000               	movlw	0
   620  00A9  00B9               	movwf	??_main+1
   621  00AA  0838               	movf	??_main,w
   622  00AB  07BF               	addwf	main@result,f
   623  00AC  1803               	skipnc
   624  00AD  0AC0               	incf	main@result+1,f
   625  00AE  0839               	movf	??_main+1,w
   626  00AF  07C0               	addwf	main@result+1,f
   627                           
   628                           ;main.c: 179: break;
   629  00B0  2953               	goto	l1415
   630  00B1                     l1473:	
   631                           ;main.c: 180: case '-':
   632                           
   633                           
   634                           ;main.c: 181: result -= (in - '0');
   635  00B1  0841               	movf	main@in,w
   636  00B2  3ED0               	addlw	208
   637  00B3  00B8               	movwf	??_main
   638  00B4  30FF               	movlw	255
   639  00B5  1803               	skipnc
   640  00B6  3000               	movlw	0
   641  00B7  00B9               	movwf	??_main+1
   642  00B8  0838               	movf	??_main,w
   643  00B9  02BF               	subwf	main@result,f
   644  00BA  0839               	movf	??_main+1,w
   645  00BB  1C03               	skipc
   646  00BC  03C0               	decf	main@result+1,f
   647  00BD  02C0               	subwf	main@result+1,f
   648                           
   649                           ;main.c: 182: break;
   650  00BE  2953               	goto	l1415
   651  00BF                     l1475:	
   652                           ;main.c: 183: case '*':
   653                           
   654                           
   655                           ;main.c: 184: result *= (in - '0');
   656  00BF  0841               	movf	main@in,w
   657  00C0  3ED0               	addlw	208
   658  00C1  00A0               	movwf	___wmul@multiplier
   659  00C2  30FF               	movlw	255
   660  00C3  1803               	skipnc
   661  00C4  3000               	movlw	0
   662  00C5  00A1               	movwf	___wmul@multiplier+1
   663  00C6  0840               	movf	main@result+1,w
   664  00C7  00A3               	movwf	___wmul@multiplicand+1
   665  00C8  083F               	movf	main@result,w
   666  00C9  00A2               	movwf	___wmul@multiplicand
   667  00CA  2277               	fcall	___wmul
   668  00CB  1283               	bcf	3,5	;RP0=0, select bank0
   669  00CC  1303               	bcf	3,6	;RP1=0, select bank0
   670  00CD  0821               	movf	?___wmul+1,w
   671  00CE  00C0               	movwf	main@result+1
   672  00CF  0820               	movf	?___wmul,w
   673  00D0  28EB               	goto	L3
   674  00D1                     l1477:	
   675                           ;main.c: 186: case '/':
   676                           
   677                           ;main.c: 185: break;
   678                           
   679                           
   680                           ;main.c: 187: if (in == '0') error = 1;
   681  00D1  3030               	movlw	48
   682  00D2  0641               	xorwf	main@in,w
   683  00D3  1D03               	btfss	3,2
   684  00D4  28DA               	goto	l1481
   685  00D5  3001               	movlw	1
   686  00D6  00BB               	movwf	main@error
   687  00D7  3000               	movlw	0
   688  00D8  00BC               	movwf	main@error+1
   689  00D9  2953               	goto	l1415
   690  00DA                     l1481:	
   691                           
   692                           ;main.c: 188: else result /= (in - '0');
   693  00DA  0841               	movf	main@in,w
   694  00DB  3ED0               	addlw	208
   695  00DC  00A0               	movwf	___lwdiv@divisor
   696  00DD  30FF               	movlw	255
   697  00DE  1803               	skipnc
   698  00DF  3000               	movlw	0
   699  00E0  00A1               	movwf	___lwdiv@divisor+1
   700  00E1  0840               	movf	main@result+1,w
   701  00E2  00A3               	movwf	___lwdiv@dividend+1
   702  00E3  083F               	movf	main@result,w
   703  00E4  00A2               	movwf	___lwdiv@dividend
   704  00E5  21E8               	fcall	___lwdiv
   705  00E6  1283               	bcf	3,5	;RP0=0, select bank0
   706  00E7  1303               	bcf	3,6	;RP1=0, select bank0
   707  00E8  0821               	movf	?___lwdiv+1,w
   708  00E9  00C0               	movwf	main@result+1
   709  00EA  0820               	movf	?___lwdiv,w
   710  00EB                     L3:	
   711  00EB  00BF               	movwf	main@result
   712                           
   713                           ;main.c: 189: }
   714  00EC  2953               	goto	l1415
   715  00ED                     l1483:	
   716  00ED  083A               	movf	main@op,w
   717                           
   718                           ; Switch size 1, requested type "space"
   719                           ; Number of cases is 4, Range of values is 42 to 47
   720                           ; switch strategies available:
   721                           ; Name         Instructions Cycles
   722                           ; simple_byte           13     7 (average)
   723                           ; direct_byte           15     9 (fixed)
   724                           ; jumptable            263     9 (fixed)
   725                           ;	Chosen strategy is simple_byte
   726  00EE  3A2A               	xorlw	42	; case 42
   727  00EF  1903               	skipnz
   728  00F0  28BF               	goto	l1475
   729  00F1  3A01               	xorlw	1	; case 43
   730  00F2  1903               	skipnz
   731  00F3  28A3               	goto	l1471
   732  00F4  3A06               	xorlw	6	; case 45
   733  00F5  1903               	skipnz
   734  00F6  28B1               	goto	l1473
   735  00F7  3A02               	xorlw	2	; case 47
   736  00F8  1903               	skipnz
   737  00F9  28D1               	goto	l1477
   738  00FA  2953               	goto	l1415
   739                           
   740                           ;main.c: 190: } else if (in == '+' || in == '-' || in == '*' || in == '/') {
   741  00FB  2953               	goto	l1415
   742  00FC                     l1485:	
   743  00FC  302B               	movlw	43
   744  00FD  0641               	xorwf	main@in,w
   745  00FE  1903               	btfsc	3,2
   746  00FF  290C               	goto	l1493
   747  0100  302D               	movlw	45
   748  0101  0641               	xorwf	main@in,w
   749  0102  1903               	btfsc	3,2
   750  0103  290C               	goto	l1493
   751  0104  302A               	movlw	42
   752  0105  0641               	xorwf	main@in,w
   753  0106  1903               	btfsc	3,2
   754  0107  290C               	goto	l1493
   755  0108  302F               	movlw	47
   756  0109  0641               	xorwf	main@in,w
   757  010A  1D03               	btfss	3,2
   758  010B  2915               	goto	l1497
   759  010C                     l1493:	
   760                           
   761                           ;main.c: 191: display('-');
   762  010C  302D               	movlw	45
   763  010D  2254               	fcall	_display
   764                           
   765                           ;main.c: 192: op = in;
   766  010E  1283               	bcf	3,5	;RP0=0, select bank0
   767  010F  1303               	bcf	3,6	;RP1=0, select bank0
   768  0110  0841               	movf	main@in,w
   769  0111  00B8               	movwf	??_main
   770  0112  0838               	movf	??_main,w
   771  0113  00BA               	movwf	main@op
   772                           
   773                           ;main.c: 193: } else if (in == 'c') {
   774  0114  2953               	goto	l1415
   775  0115                     l1497:	
   776  0115  3063               	movlw	99
   777  0116  0641               	xorwf	main@in,w
   778  0117  1903               	btfsc	3,2
   779  0118  292F               	goto	L6
   780                           
   781                           ;main.c: 196: } else if (in == '=') {
   782                           
   783                           ;main.c: 195: state = 0;
   784                           
   785                           ;main.c: 194: display(' ');
   786  0119  303D               	movlw	61
   787  011A  0641               	xorwf	main@in,w
   788  011B  1D03               	btfss	3,2
   789  011C  2953               	goto	l1415
   790                           
   791                           ;main.c: 197: display(result + '0');
   792  011D  083F               	movf	main@result,w
   793  011E  3E30               	addlw	48
   794  011F  2254               	fcall	_display
   795                           
   796                           ;main.c: 198: state = 3;
   797  0120  3003               	movlw	3
   798  0121  1283               	bcf	3,5	;RP0=0, select bank0
   799  0122  1303               	bcf	3,6	;RP1=0, select bank0
   800  0123  00BD               	movwf	main@state
   801  0124  3000               	movlw	0
   802  0125  00BE               	movwf	main@state+1
   803                           
   804                           ;main.c: 199: enable_interrupt();
   805  0126  22E1               	fcall	_enable_interrupt
   806                           
   807                           ;main.c: 200: }
   808                           ;main.c: 201: break;
   809  0127  2953               	goto	l1415
   810  0128                     l1511:	
   811                           ;main.c: 202: case 3:
   812                           
   813                           
   814                           ;main.c: 203: if (in == 'c') {
   815  0128  3063               	movlw	99
   816  0129  1283               	bcf	3,5	;RP0=0, select bank0
   817  012A  1303               	bcf	3,6	;RP1=0, select bank0
   818  012B  0641               	xorwf	main@in,w
   819  012C  1D03               	btfss	3,2
   820  012D  2936               	goto	l1519
   821                           
   822                           ;main.c: 204: disable_interrupt();
   823  012E  22ED               	fcall	_disable_interrupt
   824  012F                     L6:	
   825                           
   826                           ;main.c: 205: display(' ');
   827  012F  3020               	movlw	32
   828  0130  2254               	fcall	_display
   829                           
   830                           ;main.c: 206: state = 0;
   831  0131  1283               	bcf	3,5	;RP0=0, select bank0
   832  0132  1303               	bcf	3,6	;RP1=0, select bank0
   833  0133  01BD               	clrf	main@state
   834  0134  01BE               	clrf	main@state+1
   835                           
   836                           ;main.c: 207: } else if (in == '+' || in == '-' || in == '*' || in == '/') {
   837  0135  2953               	goto	l1415
   838  0136                     l1519:	
   839  0136  302B               	movlw	43
   840  0137  0641               	xorwf	main@in,w
   841  0138  1903               	btfsc	3,2
   842  0139  2946               	goto	l1527
   843  013A  302D               	movlw	45
   844  013B  0641               	xorwf	main@in,w
   845  013C  1903               	btfsc	3,2
   846  013D  2946               	goto	l1527
   847  013E  302A               	movlw	42
   848  013F  0641               	xorwf	main@in,w
   849  0140  1903               	btfsc	3,2
   850  0141  2946               	goto	l1527
   851  0142  302F               	movlw	47
   852  0143  0641               	xorwf	main@in,w
   853  0144  1D03               	btfss	3,2
   854  0145  2953               	goto	l1415
   855  0146                     l1527:	
   856                           
   857                           ;main.c: 208: disable_interrupt();
   858  0146  22ED               	fcall	_disable_interrupt
   859  0147                     L4:	
   860                           
   861                           ;main.c: 209: display('-');
   862  0147  302D               	movlw	45
   863  0148  2254               	fcall	_display
   864                           
   865                           ;main.c: 210: op = in;
   866  0149  1283               	bcf	3,5	;RP0=0, select bank0
   867  014A  1303               	bcf	3,6	;RP1=0, select bank0
   868  014B  0841               	movf	main@in,w
   869  014C  00B8               	movwf	??_main
   870  014D  0838               	movf	??_main,w
   871  014E  00BA               	movwf	main@op
   872                           
   873                           ;main.c: 211: state = 2;
   874  014F  3002               	movlw	2
   875  0150                     L2:	
   876  0150  00BD               	movwf	main@state
   877  0151  3000               	movlw	0
   878  0152  00BE               	movwf	main@state+1
   879  0153                     l1415:	
   880                           ;main.c: 139: while (1) {
   881                           
   882                           ;main.c: 214: }
   883                           
   884                           ;main.c: 212: }
   885                           ;main.c: 213: break;
   886                           
   887                           
   888                           ;main.c: 140: char in = read_input();
   889  0153  216A               	fcall	_read_input
   890  0154  1283               	bcf	3,5	;RP0=0, select bank0
   891  0155  1303               	bcf	3,6	;RP1=0, select bank0
   892  0156  00B8               	movwf	??_main
   893  0157  0838               	movf	??_main,w
   894  0158  00C1               	movwf	main@in
   895                           
   896                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   897                           ; Switch size 1, requested type "space"
   898                           ; Number of cases is 1, Range of values is 0 to 0
   899                           ; switch strategies available:
   900                           ; Name         Instructions Cycles
   901                           ; simple_byte            4     3 (average)
   902                           ; direct_byte            7     6 (fixed)
   903                           ; jumptable            260     6 (fixed)
   904                           ;	Chosen strategy is simple_byte
   905  0159  083E               	movf	main@state+1,w
   906  015A  3A00               	xorlw	0	; case 0
   907  015B  1903               	skipnz
   908  015C  295E               	goto	l1611
   909  015D  2953               	goto	l1415
   910  015E                     l1611:	
   911                           
   912                           ; Switch size 1, requested type "space"
   913                           ; Number of cases is 4, Range of values is 0 to 3
   914                           ; switch strategies available:
   915                           ; Name         Instructions Cycles
   916                           ; direct_byte           10     6 (fixed)
   917                           ; simple_byte           13     7 (average)
   918                           ; jumptable            260     6 (fixed)
   919                           ;	Chosen strategy is direct_byte
   920  015E  083D               	movf	main@state,w
   921  015F  0084               	movwf	4
   922  0160  3004               	movlw	4
   923  0161  0204               	subwf	4,w
   924  0162  1803               	skipnc
   925  0163  2953               	goto	l1415
   926  0164  3002               	movlw	high S1613
   927  0165  008A               	movwf	10
   928  0166  30E9               	movlw	low S1613
   929  0167  0704               	addwf	4,w
   930  0168  0082               	movwf	2
   931  0169  2953               	goto	l1415
   932  016A                     __end_of_main:	
   933                           ;main.c: 215: }
   934                           ;main.c: 217: return 0;
   935                           ;	Return value of _main is never used
   936                           
   937                           
   938                           	psect	swtext1
   939  02E9                     __pswtext1:	
   940  02E9                     S1613:	
   941  02E9  284C               	ljmp	l1417
   942  02EA  2861               	ljmp	l1427
   943  02EB  288C               	ljmp	l1459
   944  02EC  2928               	ljmp	l1511
   945                           
   946                           	psect	text1
   947  016A                     __ptext1:	
   948 ;; *************** function _read_input *****************
   949 ;; Defined at:
   950 ;;		line 50 in file "main.c"
   951 ;; Parameters:    Size  Location     Type
   952 ;;		None
   953 ;; Auto vars:     Size  Location     Type
   954 ;;  kb             16    8[BANK0 ] unsigned char [4][4]
   955 ;; Return value:  Size  Location     Type
   956 ;;                  1    wreg      unsigned char 
   957 ;; Registers used:
   958 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   959 ;; Tracked objects:
   960 ;;		On entry : 0/0
   961 ;;		On exit  : 0/0
   962 ;;		Unchanged: 0/0
   963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   964 ;;      Params:         0       0       0       0
   965 ;;      Locals:         0      16       0       0
   966 ;;      Temps:          0       4       0       0
   967 ;;      Totals:         0      20       0       0
   968 ;;Total ram usage:       20 bytes
   969 ;; Hardware stack levels used:    1
   970 ;; Hardware stack levels required when called:    2
   971 ;; This function calls:
   972 ;;		_getRow
   973 ;; This function is called by:
   974 ;;		_main
   975 ;; This function uses a non-reentrant model
   976 ;;
   977                           
   978                           
   979                           ;psect for function _read_input
   980  016A                     _read_input:	
   981                           
   982                           ;main.c: 52: char kb[4][4] = {
   983                           ;main.c: 53: {'7', '8', '9', '/'},
   984                           ;main.c: 54: {'4', '5', '6', '*'},
   985                           ;main.c: 55: {'1', '2', '3', '-'},
   986                           ;main.c: 56: {'0', 'c', '=', '+'}
   987                           ;main.c: 57: };
   988                           
   989                           ;incstack = 0
   990                           ; Regs used in _read_input: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   991  016A  3028               	movlw	read_input@kb& (0+255)
   992  016B  0084               	movwf	4
   993  016C  3042               	movlw	low read_input@F614
   994  016D  1283               	bcf	3,5	;RP0=0, select bank0
   995  016E  1303               	bcf	3,6	;RP1=0, select bank0
   996  016F  00A4               	movwf	??_read_input
   997  0170  0804               	movf	4,w
   998  0171  00A5               	movwf	??_read_input+1
   999  0172  3010               	movlw	16
  1000  0173  00A6               	movwf	??_read_input+2
  1001  0174                     u1200:	
  1002  0174  0824               	movf	??_read_input,w
  1003  0175  0084               	movwf	4
  1004  0176  1383               	bcf	3,7	;select IRP bank0
  1005  0177  0800               	movf	0,w
  1006  0178  00A7               	movwf	??_read_input+3
  1007  0179  0AA4               	incf	??_read_input,f
  1008  017A  0825               	movf	??_read_input+1,w
  1009  017B  0084               	movwf	4
  1010  017C  0827               	movf	??_read_input+3,w
  1011  017D  0080               	movwf	0
  1012  017E  0AA5               	incf	??_read_input+1,f
  1013  017F  0BA6               	decfsz	??_read_input+2,f
  1014  0180  2974               	goto	u1200
  1015  0181                     l1307:	
  1016                           ;main.c: 59: while (1) {
  1017                           
  1018                           
  1019                           ;main.c: 61: _delay((unsigned long)((10)*(4000000/4000.0)));
  1020  0181  300D               	movlw	13
  1021  0182  1283               	bcf	3,5	;RP0=0, select bank0
  1022  0183  1303               	bcf	3,6	;RP1=0, select bank0
  1023  0184  00A5               	movwf	??_read_input+1
  1024  0185  30FB               	movlw	251
  1025  0186  00A4               	movwf	??_read_input
  1026  0187                     u1657:	
  1027  0187  0BA4               	decfsz	??_read_input,f
  1028  0188  2987               	goto	u1657
  1029  0189  0BA5               	decfsz	??_read_input+1,f
  1030  018A  2987               	goto	u1657
  1031  018B  0000               	nop
  1032                           
  1033                           ;main.c: 64: PORTB <<= 1;
  1034  018C  1003               	clrc
  1035  018D  1283               	bcf	3,5	;RP0=0, select bank0
  1036  018E  1303               	bcf	3,6	;RP1=0, select bank0
  1037  018F  0D86               	rlf	6,f	;volatile
  1038                           
  1039                           ;main.c: 65: if (PORTB == 0x00) {
  1040  0190  0806               	movf	6,w	;volatile
  1041  0191  1D03               	btfss	3,2
  1042  0192  2995               	goto	l1315
  1043                           
  1044                           ;main.c: 66: PORTB = 0b00000001;
  1045  0193  3001               	movlw	1
  1046  0194  0086               	movwf	6	;volatile
  1047  0195                     l1315:	
  1048                           
  1049                           ;main.c: 67: }
  1050                           ;main.c: 70: if (PORTBbits.RB4) {
  1051  0195  1E06               	btfss	6,4	;volatile
  1052  0196  29A9               	goto	l48
  1053                           
  1054                           ;main.c: 71: return kb[getRow()][0];
  1055  0197  22B6               	fcall	_getRow
  1056  0198  1283               	bcf	3,5	;RP0=0, select bank0
  1057  0199  1303               	bcf	3,6	;RP1=0, select bank0
  1058  019A  0820               	movf	?_getRow,w
  1059  019B  00A4               	movwf	??_read_input
  1060  019C  3001               	movlw	1
  1061  019D                     u1235:	
  1062  019D  1003               	clrc
  1063  019E  0DA4               	rlf	??_read_input,f
  1064  019F  3EFF               	addlw	-1
  1065  01A0  1D03               	skipz
  1066  01A1  299D               	goto	u1235
  1067  01A2  1003               	clrc
  1068  01A3  0D24               	rlf	??_read_input,w
  1069  01A4  3E28               	addlw	(low (read_input@kb| 0))& (0+255)
  1070  01A5  0084               	movwf	4
  1071  01A6  1383               	bcf	3,7	;select IRP bank0
  1072  01A7  0800               	movf	0,w
  1073  01A8  0008               	return
  1074  01A9                     l48:	
  1075                           ;main.c: 72: } else if (PORTBbits.RB5) {
  1076                           
  1077  01A9  1E86               	btfss	6,5	;volatile
  1078  01AA  29BE               	goto	l51
  1079                           
  1080                           ;main.c: 73: return kb[getRow()][1];
  1081  01AB  22B6               	fcall	_getRow
  1082  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  1083  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  1084  01AE  0820               	movf	?_getRow,w
  1085  01AF  00A4               	movwf	??_read_input
  1086  01B0  3001               	movlw	1
  1087  01B1                     u1255:	
  1088  01B1  1003               	clrc
  1089  01B2  0DA4               	rlf	??_read_input,f
  1090  01B3  3EFF               	addlw	-1
  1091  01B4  1D03               	skipz
  1092  01B5  29B1               	goto	u1255
  1093  01B6  1003               	clrc
  1094  01B7  0D24               	rlf	??_read_input,w
  1095  01B8  3E01               	addlw	1
  1096  01B9  3E28               	addlw	(low (read_input@kb| 0))& (0+255)
  1097  01BA  0084               	movwf	4
  1098  01BB  1383               	bcf	3,7	;select IRP bank0
  1099  01BC  0800               	movf	0,w
  1100  01BD  0008               	return
  1101  01BE                     l51:	
  1102                           ;main.c: 74: } else if (PORTBbits.RB6) {
  1103                           
  1104  01BE  1F06               	btfss	6,6	;volatile
  1105  01BF  29D3               	goto	l53
  1106                           
  1107                           ;main.c: 75: return kb[getRow()][2];
  1108  01C0  22B6               	fcall	_getRow
  1109  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  1110  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  1111  01C3  0820               	movf	?_getRow,w
  1112  01C4  00A4               	movwf	??_read_input
  1113  01C5  3001               	movlw	1
  1114  01C6                     u1275:	
  1115  01C6  1003               	clrc
  1116  01C7  0DA4               	rlf	??_read_input,f
  1117  01C8  3EFF               	addlw	-1
  1118  01C9  1D03               	skipz
  1119  01CA  29C6               	goto	u1275
  1120  01CB  1003               	clrc
  1121  01CC  0D24               	rlf	??_read_input,w
  1122  01CD  3E02               	addlw	2
  1123  01CE  3E28               	addlw	(low (read_input@kb| 0))& (0+255)
  1124  01CF  0084               	movwf	4
  1125  01D0  1383               	bcf	3,7	;select IRP bank0
  1126  01D1  0800               	movf	0,w
  1127  01D2  0008               	return
  1128  01D3                     l53:	
  1129                           ;main.c: 76: } else if (PORTBbits.RB7) {
  1130                           
  1131  01D3  1F86               	btfss	6,7	;volatile
  1132  01D4  2981               	goto	l1307
  1133                           
  1134                           ;main.c: 77: return kb[getRow()][3];
  1135  01D5  22B6               	fcall	_getRow
  1136  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  1137  01D7  1303               	bcf	3,6	;RP1=0, select bank0
  1138  01D8  0820               	movf	?_getRow,w
  1139  01D9  00A4               	movwf	??_read_input
  1140  01DA  3001               	movlw	1
  1141  01DB                     u1295:	
  1142  01DB  1003               	clrc
  1143  01DC  0DA4               	rlf	??_read_input,f
  1144  01DD  3EFF               	addlw	-1
  1145  01DE  1D03               	skipz
  1146  01DF  29DB               	goto	u1295
  1147  01E0  1003               	clrc
  1148  01E1  0D24               	rlf	??_read_input,w
  1149  01E2  3E03               	addlw	3
  1150  01E3  3E28               	addlw	(low (read_input@kb| 0))& (0+255)
  1151  01E4  0084               	movwf	4
  1152  01E5  1383               	bcf	3,7	;select IRP bank0
  1153  01E6  0800               	movf	0,w
  1154  01E7  0008               	return
  1155  01E8                     __end_of_read_input:	
  1156                           
  1157                           	psect	text2
  1158  02B6                     __ptext2:	
  1159 ;; *************** function _getRow *****************
  1160 ;; Defined at:
  1161 ;;		line 34 in file "main.c"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;		None
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;  row             2    2[BANK0 ] int 
  1166 ;; Return value:  Size  Location     Type
  1167 ;;                  2    0[BANK0 ] int 
  1168 ;; Registers used:
  1169 ;;		wreg, status,2
  1170 ;; Tracked objects:
  1171 ;;		On entry : 0/0
  1172 ;;		On exit  : 0/0
  1173 ;;		Unchanged: 0/0
  1174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1175 ;;      Params:         0       2       0       0
  1176 ;;      Locals:         0       2       0       0
  1177 ;;      Temps:          0       0       0       0
  1178 ;;      Totals:         0       4       0       0
  1179 ;;Total ram usage:        4 bytes
  1180 ;; Hardware stack levels used:    1
  1181 ;; Hardware stack levels required when called:    1
  1182 ;; This function calls:
  1183 ;;		Nothing
  1184 ;; This function is called by:
  1185 ;;		_read_input
  1186 ;; This function uses a non-reentrant model
  1187 ;;
  1188                           
  1189                           
  1190                           ;psect for function _getRow
  1191  02B6                     _getRow:	
  1192                           
  1193                           ;main.c: 35: int row = 0;
  1194                           
  1195                           ;incstack = 0
  1196                           ; Regs used in _getRow: [wreg+status,2]
  1197  02B6  1283               	bcf	3,5	;RP0=0, select bank0
  1198  02B7  1303               	bcf	3,6	;RP1=0, select bank0
  1199  02B8  01A2               	clrf	getRow@row
  1200  02B9  01A3               	clrf	getRow@row+1
  1201                           
  1202                           ;main.c: 36: if (PORTBbits.RB0) {
  1203  02BA  1C06               	btfss	6,0	;volatile
  1204  02BB  2ABF               	goto	l34
  1205                           
  1206                           ;main.c: 37: row = 0;
  1207  02BC  01A2               	clrf	getRow@row
  1208  02BD  01A3               	clrf	getRow@row+1
  1209                           
  1210                           ;main.c: 38: } else if (PORTBbits.RB1) {
  1211  02BE  2ACD               	goto	l35
  1212  02BF                     l34:	
  1213  02BF  1C86               	btfss	6,1	;volatile
  1214  02C0  2AC3               	goto	l36
  1215                           
  1216                           ;main.c: 39: row = 1;
  1217  02C1  3001               	movlw	1
  1218  02C2  2ACA               	goto	L8
  1219  02C3                     l36:	
  1220                           ;main.c: 40: } else if (PORTBbits.RB2) {
  1221                           
  1222  02C3  1D06               	btfss	6,2	;volatile
  1223  02C4  2AC7               	goto	l38
  1224                           
  1225                           ;main.c: 41: row = 2;
  1226  02C5  3002               	movlw	2
  1227  02C6  2ACA               	goto	L8
  1228  02C7                     l38:	
  1229                           ;main.c: 42: } else if (PORTBbits.RB3) {
  1230                           
  1231  02C7  1D86               	btfss	6,3	;volatile
  1232  02C8  2ACD               	goto	l35
  1233                           
  1234                           ;main.c: 43: row = 3;
  1235  02C9  3003               	movlw	3
  1236  02CA                     L8:	
  1237  02CA  00A2               	movwf	getRow@row
  1238  02CB  3000               	movlw	0
  1239  02CC  00A3               	movwf	getRow@row+1
  1240  02CD                     l35:	
  1241                           
  1242                           ;main.c: 44: }
  1243                           ;main.c: 45: return row;
  1244  02CD  0823               	movf	getRow@row+1,w
  1245  02CE  00A1               	movwf	?_getRow+1
  1246  02CF  0822               	movf	getRow@row,w
  1247  02D0  00A0               	movwf	?_getRow
  1248  02D1  0008               	return
  1249  02D2                     __end_of_getRow:	
  1250                           
  1251                           	psect	text3
  1252  02E1                     __ptext3:	
  1253 ;; *************** function _enable_interrupt *****************
  1254 ;; Defined at:
  1255 ;;		line 102 in file "main.c"
  1256 ;; Parameters:    Size  Location     Type
  1257 ;;		None
  1258 ;; Auto vars:     Size  Location     Type
  1259 ;;		None
  1260 ;; Return value:  Size  Location     Type
  1261 ;;                  1    wreg      void 
  1262 ;; Registers used:
  1263 ;;		wreg, status,2
  1264 ;; Tracked objects:
  1265 ;;		On entry : 0/0
  1266 ;;		On exit  : 0/0
  1267 ;;		Unchanged: 0/0
  1268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1269 ;;      Params:         0       0       0       0
  1270 ;;      Locals:         0       0       0       0
  1271 ;;      Temps:          0       0       0       0
  1272 ;;      Totals:         0       0       0       0
  1273 ;;Total ram usage:        0 bytes
  1274 ;; Hardware stack levels used:    1
  1275 ;; Hardware stack levels required when called:    1
  1276 ;; This function calls:
  1277 ;;		Nothing
  1278 ;; This function is called by:
  1279 ;;		_main
  1280 ;; This function uses a non-reentrant model
  1281 ;;
  1282                           
  1283                           
  1284                           ;psect for function _enable_interrupt
  1285  02E1                     _enable_interrupt:	
  1286                           
  1287                           ;main.c: 103: cnt = 0;
  1288                           
  1289                           ;incstack = 0
  1290                           ; Regs used in _enable_interrupt: [wreg+status,2]
  1291  02E1  01F6               	clrf	_cnt
  1292  02E2  01F7               	clrf	_cnt+1
  1293                           
  1294                           ;main.c: 104: TMR0 = 6;
  1295  02E3  3006               	movlw	6
  1296  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  1297  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  1298  02E6  0081               	movwf	1	;volatile
  1299                           
  1300                           ;main.c: 105: INTCONbits.T0IE = 1;
  1301  02E7  168B               	bsf	11,5	;volatile
  1302  02E8  0008               	return
  1303  02E9                     __end_of_enable_interrupt:	
  1304                           
  1305                           	psect	text4
  1306  0254                     __ptext4:	
  1307 ;; *************** function _display *****************
  1308 ;; Defined at:
  1309 ;;		line 23 in file "main.c"
  1310 ;; Parameters:    Size  Location     Type
  1311 ;;  n               1    wreg     unsigned char 
  1312 ;; Auto vars:     Size  Location     Type
  1313 ;;  n               1    0[BANK0 ] unsigned char 
  1314 ;; Return value:  Size  Location     Type
  1315 ;;                  1    wreg      void 
  1316 ;; Registers used:
  1317 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1318 ;; Tracked objects:
  1319 ;;		On entry : 0/0
  1320 ;;		On exit  : 0/0
  1321 ;;		Unchanged: 0/0
  1322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1323 ;;      Params:         0       0       0       0
  1324 ;;      Locals:         0       1       0       0
  1325 ;;      Temps:          0       0       0       0
  1326 ;;      Totals:         0       1       0       0
  1327 ;;Total ram usage:        1 bytes
  1328 ;; Hardware stack levels used:    1
  1329 ;; Hardware stack levels required when called:    1
  1330 ;; This function calls:
  1331 ;;		Nothing
  1332 ;; This function is called by:
  1333 ;;		_main
  1334 ;; This function uses a non-reentrant model
  1335 ;;
  1336                           
  1337                           
  1338                           ;psect for function _display
  1339  0254                     _display:	
  1340                           
  1341                           ;incstack = 0
  1342                           ; Regs used in _display: [wreg-fsr0h+status,2+status,0]
  1343                           ;display@n stored from wreg
  1344  0254  1283               	bcf	3,5	;RP0=0, select bank0
  1345  0255  1303               	bcf	3,6	;RP1=0, select bank0
  1346  0256  00A0               	movwf	display@n
  1347                           
  1348                           ;main.c: 24: if (n >= '0' && n <= '9')
  1349  0257  3030               	movlw	48
  1350  0258  0220               	subwf	display@n,w
  1351  0259  1C03               	skipc
  1352  025A  2A66               	goto	l1293
  1353  025B  303A               	movlw	58
  1354  025C  0220               	subwf	display@n,w
  1355  025D  1803               	skipnc
  1356  025E  2A66               	goto	l1293
  1357                           
  1358                           ;main.c: 25: PORTA = lookup7segCa[n - '0'];
  1359  025F  0820               	movf	display@n,w
  1360  0260  3ED0               	addlw	208
  1361  0261  3E52               	addlw	(low (_lookup7segCa| 0))& (0+255)
  1362  0262  0084               	movwf	4
  1363  0263  1383               	bcf	3,7	;select IRP bank0
  1364  0264  0800               	movf	0,w
  1365  0265  0085               	movwf	5	;volatile
  1366  0266                     l1293:	
  1367                           
  1368                           ;main.c: 26: if (n == ' ')
  1369  0266  3020               	movlw	32
  1370  0267  0620               	xorwf	display@n,w
  1371  0268  1903               	btfsc	3,2
  1372                           
  1373                           ;main.c: 27: PORTA = 0;
  1374  0269  0185               	clrf	5	;volatile
  1375                           
  1376                           ;main.c: 28: if (n == 'E')
  1377  026A  3045               	movlw	69
  1378  026B  0620               	xorwf	display@n,w
  1379  026C  1D03               	btfss	3,2
  1380  026D  2A70               	goto	l1301
  1381                           
  1382                           ;main.c: 29: PORTA = lookup7segCa[11];
  1383  026E  085D               	movf	_lookup7segCa+11,w
  1384  026F  0085               	movwf	5	;volatile
  1385  0270                     l1301:	
  1386                           
  1387                           ;main.c: 30: if (n == '-')
  1388  0270  302D               	movlw	45
  1389  0271  0620               	xorwf	display@n,w
  1390  0272  1D03               	btfss	3,2
  1391  0273  0008               	return
  1392                           
  1393                           ;main.c: 31: PORTA = lookup7segCa[10];
  1394  0274  085C               	movf	_lookup7segCa+10,w
  1395  0275  0085               	movwf	5	;volatile
  1396  0276  0008               	return
  1397  0277                     __end_of_display:	
  1398                           
  1399                           	psect	text5
  1400  02ED                     __ptext5:	
  1401 ;; *************** function _disable_interrupt *****************
  1402 ;; Defined at:
  1403 ;;		line 109 in file "main.c"
  1404 ;; Parameters:    Size  Location     Type
  1405 ;;		None
  1406 ;; Auto vars:     Size  Location     Type
  1407 ;;		None
  1408 ;; Return value:  Size  Location     Type
  1409 ;;                  1    wreg      void 
  1410 ;; Registers used:
  1411 ;;		None
  1412 ;; Tracked objects:
  1413 ;;		On entry : 0/0
  1414 ;;		On exit  : 0/0
  1415 ;;		Unchanged: 0/0
  1416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1417 ;;      Params:         0       0       0       0
  1418 ;;      Locals:         0       0       0       0
  1419 ;;      Temps:          0       0       0       0
  1420 ;;      Totals:         0       0       0       0
  1421 ;;Total ram usage:        0 bytes
  1422 ;; Hardware stack levels used:    1
  1423 ;; Hardware stack levels required when called:    1
  1424 ;; This function calls:
  1425 ;;		Nothing
  1426 ;; This function is called by:
  1427 ;;		_main
  1428 ;; This function uses a non-reentrant model
  1429 ;;
  1430                           
  1431                           
  1432                           ;psect for function _disable_interrupt
  1433  02ED                     _disable_interrupt:	
  1434                           
  1435                           ;main.c: 110: INTCONbits.T0IE = 0;
  1436                           
  1437                           ;incstack = 0
  1438                           ; Regs used in _disable_interrupt: []
  1439  02ED  128B               	bcf	11,5	;volatile
  1440  02EE  0008               	return
  1441  02EF                     __end_of_disable_interrupt:	
  1442                           
  1443                           	psect	text6
  1444  0277                     __ptext6:	
  1445 ;; *************** function ___wmul *****************
  1446 ;; Defined at:
  1447 ;;		line 15 in file "/opt/microchip/xc8/v1.42/sources/common/Umul16.c"
  1448 ;; Parameters:    Size  Location     Type
  1449 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1450 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1451 ;; Auto vars:     Size  Location     Type
  1452 ;;  product         2    4[BANK0 ] unsigned int 
  1453 ;; Return value:  Size  Location     Type
  1454 ;;                  2    0[BANK0 ] unsigned int 
  1455 ;; Registers used:
  1456 ;;		wreg, status,2, status,0
  1457 ;; Tracked objects:
  1458 ;;		On entry : 0/0
  1459 ;;		On exit  : 0/0
  1460 ;;		Unchanged: 0/0
  1461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1462 ;;      Params:         0       4       0       0
  1463 ;;      Locals:         0       2       0       0
  1464 ;;      Temps:          0       0       0       0
  1465 ;;      Totals:         0       6       0       0
  1466 ;;Total ram usage:        6 bytes
  1467 ;; Hardware stack levels used:    1
  1468 ;; Hardware stack levels required when called:    1
  1469 ;; This function calls:
  1470 ;;		Nothing
  1471 ;; This function is called by:
  1472 ;;		_main
  1473 ;; This function uses a non-reentrant model
  1474 ;;
  1475                           
  1476                           
  1477                           ;psect for function ___wmul
  1478  0277                     ___wmul:	
  1479                           
  1480                           ;incstack = 0
  1481                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1482  0277  1283               	bcf	3,5	;RP0=0, select bank0
  1483  0278  1303               	bcf	3,6	;RP1=0, select bank0
  1484  0279  01A4               	clrf	___wmul@product
  1485  027A  01A5               	clrf	___wmul@product+1
  1486  027B                     l1349:	
  1487  027B  1C20               	btfss	___wmul@multiplier,0
  1488  027C  2A83               	goto	l205
  1489  027D  0822               	movf	___wmul@multiplicand,w
  1490  027E  07A4               	addwf	___wmul@product,f
  1491  027F  1803               	skipnc
  1492  0280  0AA5               	incf	___wmul@product+1,f
  1493  0281  0823               	movf	___wmul@multiplicand+1,w
  1494  0282  07A5               	addwf	___wmul@product+1,f
  1495  0283                     l205:	
  1496  0283  3001               	movlw	1
  1497  0284                     u1315:	
  1498  0284  1003               	clrc
  1499  0285  0DA2               	rlf	___wmul@multiplicand,f
  1500  0286  0DA3               	rlf	___wmul@multiplicand+1,f
  1501  0287  3EFF               	addlw	-1
  1502  0288  1D03               	skipz
  1503  0289  2A84               	goto	u1315
  1504  028A  3001               	movlw	1
  1505  028B                     u1325:	
  1506  028B  1003               	clrc
  1507  028C  0CA1               	rrf	___wmul@multiplier+1,f
  1508  028D  0CA0               	rrf	___wmul@multiplier,f
  1509  028E  3EFF               	addlw	-1
  1510  028F  1D03               	skipz
  1511  0290  2A8B               	goto	u1325
  1512  0291  0820               	movf	___wmul@multiplier,w
  1513  0292  0421               	iorwf	___wmul@multiplier+1,w
  1514  0293  1D03               	btfss	3,2
  1515  0294  2A7B               	goto	l1349
  1516  0295  0825               	movf	___wmul@product+1,w
  1517  0296  00A1               	movwf	?___wmul+1
  1518  0297  0824               	movf	___wmul@product,w
  1519  0298  00A0               	movwf	?___wmul
  1520  0299  0008               	return
  1521  029A                     __end_of___wmul:	
  1522                           
  1523                           	psect	text7
  1524  01E8                     __ptext7:	
  1525 ;; *************** function ___lwdiv *****************
  1526 ;; Defined at:
  1527 ;;		line 6 in file "/opt/microchip/xc8/v1.42/sources/common/lwdiv.c"
  1528 ;; Parameters:    Size  Location     Type
  1529 ;;  divisor         2    0[BANK0 ] unsigned int 
  1530 ;;  dividend        2    2[BANK0 ] unsigned int 
  1531 ;; Auto vars:     Size  Location     Type
  1532 ;;  quotient        2    6[BANK0 ] unsigned int 
  1533 ;;  counter         1    5[BANK0 ] unsigned char 
  1534 ;; Return value:  Size  Location     Type
  1535 ;;                  2    0[BANK0 ] unsigned int 
  1536 ;; Registers used:
  1537 ;;		wreg, status,2, status,0
  1538 ;; Tracked objects:
  1539 ;;		On entry : 0/0
  1540 ;;		On exit  : 0/0
  1541 ;;		Unchanged: 0/0
  1542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1543 ;;      Params:         0       4       0       0
  1544 ;;      Locals:         0       3       0       0
  1545 ;;      Temps:          0       1       0       0
  1546 ;;      Totals:         0       8       0       0
  1547 ;;Total ram usage:        8 bytes
  1548 ;; Hardware stack levels used:    1
  1549 ;; Hardware stack levels required when called:    1
  1550 ;; This function calls:
  1551 ;;		Nothing
  1552 ;; This function is called by:
  1553 ;;		_main
  1554 ;; This function uses a non-reentrant model
  1555 ;;
  1556                           
  1557                           
  1558                           ;psect for function ___lwdiv
  1559  01E8                     ___lwdiv:	
  1560                           
  1561                           ;incstack = 0
  1562                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1563  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  1564  01E9  1303               	bcf	3,6	;RP1=0, select bank0
  1565  01EA  01A6               	clrf	___lwdiv@quotient
  1566  01EB  01A7               	clrf	___lwdiv@quotient+1
  1567  01EC  0820               	movf	___lwdiv@divisor,w
  1568  01ED  0421               	iorwf	___lwdiv@divisor+1,w
  1569  01EE  1903               	btfsc	3,2
  1570  01EF  2A21               	goto	l1383
  1571  01F0  01A5               	clrf	___lwdiv@counter
  1572  01F1  0AA5               	incf	___lwdiv@counter,f
  1573  01F2                     l1371:	
  1574  01F2  1BA1               	btfsc	___lwdiv@divisor+1,7
  1575  01F3  2A00               	goto	l1373
  1576  01F4  3001               	movlw	1
  1577  01F5                     u1355:	
  1578  01F5  1003               	clrc
  1579  01F6  0DA0               	rlf	___lwdiv@divisor,f
  1580  01F7  0DA1               	rlf	___lwdiv@divisor+1,f
  1581  01F8  3EFF               	addlw	-1
  1582  01F9  1D03               	skipz
  1583  01FA  29F5               	goto	u1355
  1584  01FB  3001               	movlw	1
  1585  01FC  00A4               	movwf	??___lwdiv
  1586  01FD  0824               	movf	??___lwdiv,w
  1587  01FE  07A5               	addwf	___lwdiv@counter,f
  1588  01FF  29F2               	goto	l1371
  1589  0200                     l1373:	
  1590  0200  3001               	movlw	1
  1591  0201                     u1375:	
  1592  0201  1003               	clrc
  1593  0202  0DA6               	rlf	___lwdiv@quotient,f
  1594  0203  0DA7               	rlf	___lwdiv@quotient+1,f
  1595  0204  3EFF               	addlw	-1
  1596  0205  1D03               	skipz
  1597  0206  2A01               	goto	u1375
  1598  0207  0821               	movf	___lwdiv@divisor+1,w
  1599  0208  0223               	subwf	___lwdiv@dividend+1,w
  1600  0209  1D03               	skipz
  1601  020A  2A0D               	goto	u1385
  1602  020B  0820               	movf	___lwdiv@divisor,w
  1603  020C  0222               	subwf	___lwdiv@dividend,w
  1604  020D                     u1385:	
  1605  020D  1C03               	skipc
  1606  020E  2A16               	goto	l1379
  1607  020F  0820               	movf	___lwdiv@divisor,w
  1608  0210  02A2               	subwf	___lwdiv@dividend,f
  1609  0211  0821               	movf	___lwdiv@divisor+1,w
  1610  0212  1C03               	skipc
  1611  0213  03A3               	decf	___lwdiv@dividend+1,f
  1612  0214  02A3               	subwf	___lwdiv@dividend+1,f
  1613  0215  1426               	bsf	___lwdiv@quotient,0
  1614  0216                     l1379:	
  1615  0216  3001               	movlw	1
  1616  0217                     u1395:	
  1617  0217  1003               	clrc
  1618  0218  0CA1               	rrf	___lwdiv@divisor+1,f
  1619  0219  0CA0               	rrf	___lwdiv@divisor,f
  1620  021A  3EFF               	addlw	-1
  1621  021B  1D03               	skipz
  1622  021C  2A17               	goto	u1395
  1623  021D  3001               	movlw	1
  1624  021E  02A5               	subwf	___lwdiv@counter,f
  1625  021F  1D03               	btfss	3,2
  1626  0220  2A00               	goto	l1373
  1627  0221                     l1383:	
  1628  0221  0827               	movf	___lwdiv@quotient+1,w
  1629  0222  00A1               	movwf	?___lwdiv+1
  1630  0223  0826               	movf	___lwdiv@quotient,w
  1631  0224  00A0               	movwf	?___lwdiv
  1632  0225  0008               	return
  1633  0226                     __end_of___lwdiv:	
  1634                           
  1635                           	psect	text8
  1636  0226                     __ptext8:	
  1637 ;; *************** function _clock *****************
  1638 ;; Defined at:
  1639 ;;		line 87 in file "main.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;		None
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;		None
  1644 ;; Return value:  Size  Location     Type
  1645 ;;                  1    wreg      void 
  1646 ;; Registers used:
  1647 ;;		wreg, status,2, status,0
  1648 ;; Tracked objects:
  1649 ;;		On entry : 0/0
  1650 ;;		On exit  : 0/0
  1651 ;;		Unchanged: 0/0
  1652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1653 ;;      Params:         0       0       0       0
  1654 ;;      Locals:         0       0       0       0
  1655 ;;      Temps:          6       0       0       0
  1656 ;;      Totals:         6       0       0       0
  1657 ;;Total ram usage:        6 bytes
  1658 ;; Hardware stack levels used:    1
  1659 ;; This function calls:
  1660 ;;		Nothing
  1661 ;; This function is called by:
  1662 ;;		Interrupt level 1
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           
  1667                           ;psect for function _clock
  1668  0226                     _clock:	
  1669                           
  1670                           ;main.c: 88: cnt++;
  1671  0226  3001               	movlw	1
  1672  0227  07F6               	addwf	_cnt,f
  1673  0228  1803               	skipnc
  1674  0229  0AF7               	incf	_cnt+1,f
  1675  022A  3000               	movlw	0
  1676  022B  07F7               	addwf	_cnt+1,f
  1677                           
  1678                           ;main.c: 89: TMR0 = 6;
  1679  022C  3006               	movlw	6
  1680  022D  0081               	movwf	1	;volatile
  1681                           
  1682                           ;main.c: 90: if (cnt == 1000) {
  1683  022E  30E8               	movlw	232
  1684  022F  0676               	xorwf	_cnt,w
  1685  0230  3003               	movlw	3
  1686  0231  1903               	skipnz
  1687  0232  0677               	xorwf	_cnt+1,w
  1688  0233  1D03               	btfss	3,2
  1689  0234  2A3D               	goto	i1l703
  1690                           
  1691                           ;main.c: 91: PORTAcache = PORTA;
  1692  0235  0805               	movf	5,w	;volatile
  1693  0236  00F0               	movwf	??_clock
  1694  0237  01F1               	clrf	??_clock+1
  1695  0238  0870               	movf	??_clock,w
  1696  0239  00F8               	movwf	_PORTAcache
  1697  023A  0871               	movf	??_clock+1,w
  1698  023B  00F9               	movwf	_PORTAcache+1
  1699                           
  1700                           ;main.c: 92: PORTA = 0;
  1701  023C  0185               	clrf	5	;volatile
  1702  023D                     i1l703:	
  1703                           
  1704                           ;main.c: 93: }
  1705                           ;main.c: 94: if (cnt == 1500) {
  1706  023D  30DC               	movlw	220
  1707  023E  0676               	xorwf	_cnt,w
  1708  023F  3005               	movlw	5
  1709  0240  1903               	skipnz
  1710  0241  0677               	xorwf	_cnt+1,w
  1711  0242  1D03               	btfss	3,2
  1712  0243  2A48               	goto	i1l709
  1713                           
  1714                           ;main.c: 95: cnt = 0;
  1715  0244  01F6               	clrf	_cnt
  1716  0245  01F7               	clrf	_cnt+1
  1717                           
  1718                           ;main.c: 96: PORTA = PORTAcache;
  1719  0246  0878               	movf	_PORTAcache,w
  1720  0247  0085               	movwf	5	;volatile
  1721  0248                     i1l709:	
  1722                           
  1723                           ;main.c: 97: }
  1724                           ;main.c: 99: INTCONbits.T0IF=0;
  1725  0248  110B               	bcf	11,2	;volatile
  1726  0249  0875               	movf	??_clock+5,w
  1727  024A  00FF               	movwf	127
  1728  024B  0874               	movf	??_clock+4,w
  1729  024C  008A               	movwf	10
  1730  024D  0873               	movf	??_clock+3,w
  1731  024E  0084               	movwf	4
  1732  024F  0E72               	swapf	(??_clock+2)^(0+-128),w
  1733  0250  0083               	movwf	3
  1734  0251  0EFE               	swapf	126,f
  1735  0252  0E7E               	swapf	126,w
  1736  0253  0009               	retfie
  1737  0254                     __end_of_clock:	
  1738  007E                     btemp	set	126	;btemp
  1739  007E                     wtemp0	set	126
  1740                           
  1741                           	psect	intentry
  1742  0004                     __pintentry:	
  1743                           ;incstack = 0
  1744                           ; Regs used in _clock: [wreg+status,2+status,0]
  1745                           
  1746  0004                     interrupt_function:	
  1747  007E                     saved_w	set	btemp
  1748  0004  00FE               	movwf	btemp
  1749  0005  0E03               	swapf	3,w
  1750  0006  00F2               	movwf	??_clock+2
  1751  0007  0804               	movf	4,w
  1752  0008  00F3               	movwf	??_clock+3
  1753  0009  080A               	movf	10,w
  1754  000A  00F4               	movwf	??_clock+4
  1755  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1756  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1757  000D  087F               	movf	btemp+1,w
  1758  000E  00F5               	movwf	??_clock+5
  1759  000F  2A26               	ljmp	_clock


Data Sizes:
    Strings     0
    Constant    0
    Data        28
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     34      62
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _clock in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_read_input
    _read_input->_getRow

Critical Paths under _clock in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _clock in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _clock in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    2329
                                             24 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
                  _disable_interrupt
                            _display
                   _enable_interrupt
                         _read_input
 ---------------------------------------------------------------------------------
 (1) _read_input                                          20    20      0     197
                                              4 BANK0     20    20      0
                             _getRow
 ---------------------------------------------------------------------------------
 (2) _getRow                                               4     2      2      46
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _enable_interrupt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _display                                              1     1      0     186
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _disable_interrupt                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     266
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              8     4      4     371
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _clock                                                6     6      0       0
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwdiv
   ___wmul
   _disable_interrupt
   _display
   _enable_interrupt
   _read_input
     _getRow

 _clock (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     22      3E       3       77.5%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      48      10        0.0%
ABS                  0      0      48       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Jul 11 18:09:42 2017

                         pc 0002                          l34 02BF                          l35 02CD  
                        l51 01BE                          l36 02C3                          l53 01D3  
                        l38 02C7                          l48 01A9                          fsr 0004  
       ___wmul@multiplicand 0022                         l205 0283                         _cnt 0076  
                       fsr0 0004                         indf 0000                        S1613 02E9  
                      l1301 0270                        l1315 0195                        l1307 0181  
                      l1511 0128                        l1415 0153                        l1417 004C  
                      l1371 01F2                        l1611 015E                        l1427 0061  
                      l1373 0200                        l1349 027B                        l1293 0266  
                      l1453 007F                        l1383 0221                        l1527 0146  
                      l1519 0136                        l1471 00A3                        l1481 00DA  
                      l1473 00B1                        l1379 0216                        l1475 00BF  
                      l1483 00ED                        l1459 008C                        l1493 010C  
                      l1477 00D1                        l1485 00FC                        l1497 0115  
                      u1200 0174                        u1315 0284                        u1235 019D  
                      u1325 028B                        u1255 01B1                        u1355 01F5  
                      u1275 01C6                        u1375 0201                        u1295 01DB  
                      u1385 020D                        u1395 0217                        u1657 0187  
                      _TMR0 0001                        _main 0021           _disable_interrupt 02ED  
                      btemp 007E                        start 0010          ?_disable_interrupt 0070  
 __size_of_enable_interrupt 0008         ??_disable_interrupt 0020                       ?_main 0070  
             __CFG_WDTE$OFF 0000                       _CMCON 001F                       _T1CON 0010  
           __end_of___lwdiv 0226                       i1l703 023D                       i1l709 0248  
                     _PORTA 0005                       _PORTB 0006                       _TRISA 0085  
                     _TRISB 0086             __end_of_display 0277                       _clock 0226  
 __end_of_disable_interrupt 02EF                       pclath 000A                       status 0003  
                     wtemp0 007E             __initialization 0011                __end_of_main 016A  
                    ??_main 0038                      ?_clock 0070                      ___wmul 0277  
                 ??___lwdiv 0024                      _getRow 02B6                      main@in 0041  
                    main@op 003A                   ??_display 0020                      saved_w 007E  
__size_of_disable_interrupt 0002     __end_of__initialization 001F              __pcstackCOMMON 0070  
              __pidataBANK0 029A               __end_of_clock 0254            _enable_interrupt 02E1  
            _OPTION_REGbits 0081                     ??_clock 0070                  __pmaintext 0021  
                   ?___wmul 0020                  __pintentry 0004                     ?_getRow 0020  
           __size_of___wmul 0023                     ___lwdiv 01E8             __size_of_getRow 001C  
                _read_input 016A                     __ptext1 016A                     __ptext2 02B6  
                   __ptext3 02E1                     __ptext4 0254                     __ptext5 02ED  
                   __ptext6 0277                     __ptext7 01E8                     __ptext8 0226  
                   _display 0254        end_of_initialization 001F                read_input@kb 0028  
                 _PORTBbits 0006    __end_of_enable_interrupt 02E9                  main@result 003F  
            __end_of___wmul 029A              __end_of_getRow 02D2                 ?_read_input 0070  
       start_initialization 0011                    ??___wmul 0024                  init_fetch0 02D2  
                  ??_getRow 0022                 __pdataBANK0 0042                 __pbssCOMMON 0076  
                 ___latbits 0000               __pcstackBANK0 0020         __size_of_read_input 007E  
          ___lwdiv@dividend 0022                    ?___lwdiv 0020                   __pswtext1 02E9  
                  ?_display 0070            ___lwdiv@quotient 0026              __size_of_clock 002E  
         interrupt_function 0004              ___wmul@product 0024                   getRow@row 0022  
         ___wmul@multiplier 0020                   main@error 003B                   main@state 003D  
         ?_enable_interrupt 0070          ??_enable_interrupt 0020                _lookup7segCa 0052  
          __size_of___lwdiv 003E                ??_read_input 0024            __size_of_display 0023  
           ___lwdiv@divisor 0020             ___lwdiv@counter 0025               __size_of_main 0149  
        __end_of_read_input 01E8                    display@n 0020                  _INTCONbits 000B  
                  init_ram0 02D6                    intlevel1 0000              read_input@F614 0042  
                _PORTAcache 0078          __CFG_FOSC$INTOSCIO 0000  
